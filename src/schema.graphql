type Query {
	user: [User]!
	me: User!
	profile: [Profile!]!
}

type Mutation {
	signup(data: SignupInput!): SignupPayload!
	login(data: LoginInput!): LoginPayload!
	update_user(data: UpdateUserInput!): User!
	delete_user: User!
	create_profile(data: CreateProfileInput!): Profile!
	update_profile(data: UpdateProfileInput!): Profile!
	delete_profile: Profile!
}

type Subscription {
	profile: ProfileSubPayload!
	user: UserSubPayload!
}

enum MutationType {
	CREATED
	UPDATED
	DELETED
}

type ProfileSubPayload {
	mutation: MutationType!
	data: Profile
}

type UserSubPayload {
	mutation: MutationType!
	data: User
}

input SignupInput {
	name: String!
	email: String!
	password: String!
}

type SignupPayload {
	id: String!
	name: String!
	email: String!
}

input LoginInput {
	email: String!
	password: String!
}

type LoginPayload {
	token: String!
	user: User!
}

input UpdateUserInput {
	name: String
	email: String
	password: String
}

input CreateProfileInput {
	bio: String
	location: String
}

input UpdateProfileInput {
	bio: String
	location: String
}

type User {
	id: ID!
	name: String!
	email: String!
	password: String
	profile: Profile
}

type Profile {
	id: ID!
	bio: String!
	location: String
	author: User!
}
